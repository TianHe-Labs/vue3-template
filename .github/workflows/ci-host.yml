# This is a basic workflow to help you get started with Actions

name: Build and Deploy to Server

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REMOTE_USER: root # FIXME: user of remote host
  REMOTE_PATH: /var/www/vue-template # FIXME: nginx root path of built dist on remote host
  BASE_URL: /vue-template/ # FIXME: deploy in sub path (https://cn.vitejs.dev/config/shared-options.html#base)

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3

      # Install Node.js
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Install dependencies with npm
      - name: Install dependencies
        run: npm install

      # Build with npm
      - name: Build vue3.x app
        run: npm run build -- --base=${{ env.BASE_URL }}

      # SSH deploy to server
      - name: SSH deploy to server
        # You may pin to the exact commit or the version.
        # uses: kostya-ten/ssh-server-deploy@e0deb814bc458a68b61f6597a865d096e33eb586
        uses: kostya-ten/ssh-server-deploy@v4
        with:
          # Host
          host: ${{ secrets.REMOTE_HOST }} # configure in Github Actions secret
          # Port
          port: ${{ secrets.REMOTE_PORT }} # configure in Github Actions secret
          # Username
          username: ${{ env.REMOTE_USER }}
          # Private key
          private_key: ${{ secrets.PRIVATE_KEY }} # configure in Github Actions secret
          # Before script
          # if [ ! -d ${{ env.REMOTE_PATH }} ];then mkdir ${{ env.REMOTE_PATH }};el
          before_script: |
            if [[ -n $(ls ${{ env.REMOTE_PATH }}) ]];then rm -r ${{ env.REMOTE_PATH }};fi
          # After script
          after_script: nginx -s reload
          # After script
          scp_source: dist
          # After script
          scp_target: ${{ env.REMOTE_PATH }}
