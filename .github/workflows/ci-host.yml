# This is a basic workflow to help you get started with Actions

name: Build and Deploy to Server

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3

      # Install Node.js
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          # cache: 'npm' # use pnpm instead of npm

      # Install pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.1
        id: pnpm-install
        with:
          version: 7
          run_install: false

      # Cache
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      # Cache
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Install dependencies with pnpm
      - name: Install dependencies
        run: pnpm install

      # Build with pnpm
      - name: Build vue3.x app
        run: pnpm run build # -- --base=

      # SSH deploy to server
      - name: SSH deploy to server
        # You may pin to the exact commit or the version.
        # uses: kostya-ten/ssh-server-deploy@e0deb814bc458a68b61f6597a865d096e33eb586
        uses: kostya-ten/ssh-server-deploy@v4
        with:
          # Host
          host: ${{ secrets.REMOTE_HOST }}
          # Port
          port: ${{ secrets.REMOTE_PORT }}
          # Username
          username: ${{ secrets.REMOTE_USER }}
          # Password
          # password: ${{ secrets.REMOTE_PWD }} # optional
          # Private key
          private_key: ${{ secrets.PRIVATE_KEY }}
          # Before script
          # if [ ! -d ${{ secrets.REMOTE_PATH }} ];then mkdir ${{ secrets.REMOTE_PATH }};el
          before_script: |
            if [[ -n $(ls ${{ secrets.REMOTE_PATH }}) ]];then rm -r ${{ secrets.REMOTE_PATH }};fi
          # After script
          after_script: nginx -s reload
          # After script
          scp_source: dist # dist/ # ./dist
          # After script
          scp_target: ${{ secrets.REMOTE_PATH }} # /var/www/{{ target_path }}
